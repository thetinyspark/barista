"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
__exportStar(require("@thetinyspark/tiny-observer"), exports);
__exportStar(require("./core/controls/index"), exports);
__exportStar(require("./core/display/index"), exports);
__exportStar(require("./core/filters/index"), exports);
__exportStar(require("./core/rendering/index"), exports);
__exportStar(require("./core/rendering/canvas/index"), exports);
__exportStar(require("./sdk/common/utils/index"), exports);
__exportStar(require("./sdk/common/utils/fsm/index"), exports);
__exportStar(require("./sdk/common/model/node/index"), exports);
__exportStar(require("./sdk/common/model/space/partitioning/grid/index"), exports);
__exportStar(require("./sdk/common/model/space/partitioning/tree/index"), exports);
__exportStar(require("./sdk/common/model/space/storage/index"), exports);
__exportStar(require("./sdk/isometric/mixins/index"), exports);
__exportStar(require("./sdk/isometric/model/node/index"), exports);
__exportStar(require("./sdk/isometric/utils/index"), exports);
__exportStar(require("./sdk/isometric/view/map/index"), exports);
__exportStar(require("./core/assets/index.node"), exports);
__exportStar(require("./core/texture/index.node"), exports);
__exportStar(require("./core/utils/index.node"), exports);
const gl_matrix_1 = require("gl-matrix");
const Stage_1 = require("./core/display/Stage");
/*test*/
const _1 = require(".");
const _2 = require(".");
const DisplayObject_1 = require("./core/display/DisplayObject");
const fs = require("fs");
gl_matrix_1.glMatrix.setMatrixArrayType(Array);
const stage = new Stage_1.default();
const canvas = _1.CanvasUtils.create(100, 100);
const ctx = canvas.getContext("2d");
ctx.fillStyle = "red";
ctx.fillRect(0, 0, 100, 100);
ctx.fill();
const texture = _2.Texture.createFromSource("red", canvas);
const disp = DisplayObject_1.default.createFromTexture(texture);
stage.getCanvas().width = 200;
stage.getCanvas().height = 200;
disp.transformOrigin.x = disp.width >> 1;
disp.transformOrigin.y = disp.height >> 1;
disp.rotation = 45;
stage.addChild(disp);
stage.nextFrame();
const buffer = stage.getCanvas().toBuffer();
fs.writeFileSync("./test.png", buffer);
